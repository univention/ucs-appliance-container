#!/bin/bash
#
# Univention Container Mode - apt-sources-list
#
# Copyright 2020-2021 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

## util(s)
source /usr/lib/univention-container-mode/utils.sh || exit 1

## function(s)
# function name() { # name: (IN)[>(OUT)]
# 	echo function
# }

## ucr shell
# eval "$(ucr shell hostname domainname)"

## declare
declare -a ucrchanges
# ucrchanges+=("key=value")
declare -a ucrremoves
# ucrremoves+=("key")

declare -A ucrcounter
# ucrcounter[<STRING>]=<INT>

declare -A ucrcommit
# ucrcommit+=/<PATH>/<FILE> OR ucrcommit[<FILE>]=/<PATH>/<FILE>

debug "### START SCRIPT($(pwd)/$0) ###"
## create the latest container mode environment based on ucs-releases.json, fallback to github repository default tag or form specific version
#
[[ ${LATEST:-TRUE} =~ ^1|yes|true|YES|TRUE$ ]] && {
	version=$(
		awk '\
			/ucs/{ \
				for(i=0;i<=NF;i++){ \
					if ( $i ~ /^ucs/) { gsub(/^ucs/,"",$i); printf $i } \
				} \
			}' $(find /etc/apt/sources.list /etc/apt/sources.list.d -type f -name *.list)
	)

	VERSION=${VERSION:-$(
		[[ ${version} -ge 500 ]] && UniventionLatestReleaseMirror ||
			UniventionDefaultBranchGitHub
	)}

	echo ${VERSION} | egrep --quiet -- "[[:digit:]]" || VERSION=$(
		UniventionDefaultBranchGitHub
	)

	major=$(echo ${version} | tr --complement --delete '[:digit:]' | awk NF=NF FS= | awk '{ print $1 }')
	MAJOR=$(echo ${VERSION} | tr --complement --delete '[:digit:]' | awk NF=NF FS= | awk '{ print $1 }')

	minor=$(echo ${version} | tr --complement --delete '[:digit:]' | awk NF=NF FS= | awk '{ print $2 }')
	MINOR=$(echo ${VERSION} | tr --complement --delete '[:digit:]' | awk NF=NF FS= | awk '{ print $2 }')

	patch=$(echo ${version} | tr --complement --delete '[:digit:]' | awk NF=NF FS= | awk '{ print $3 }')
	PATCH=$(echo ${VERSION} | tr --complement --delete '[:digit:]' | awk NF=NF FS= | awk '{ print $3 }')

	echo "${major}.${minor}-${patch} ${MAJOR}.${MINOR}-${PATCH}" | egrep --quiet -- "^[[:digit:]]\.[[:digit:]]\-[[:digit:]]\s[[:digit:]]\.[[:digit:]]\-[[:digit:]]$" && {
		if [[ "${major}.${minor}-${patch}" != "${MAJOR}.${MINOR}-${PATCH}" ]]; then
			until dpkg --compare-versions ${major}${minor}${patch} ge ${MAJOR}${MINOR}${PATCH}; do
				apt-get -qq update 2>/dev/null && apt-get -qqy dist-upgrade && apt-get -qqy autoremove || /bin/true

				[[ ${major} -ge ${MAJOR} ]] && [[ ${minor} -ge ${MINOR} ]] &&
					patch=${PATCH} || patch=0

				[[ ${major} -ge ${MAJOR} ]] ||
					minor=$((${minor} + 1))

				[[ ${minor} -ge ${MINOR} ]] ||
					minor=$((${minor} + 1))

				[[ ${minor} -ge 10 ]] &&
					major=$((${major} + 1)) &&
					minor=0

				UniventionAptSourcesList ${major} ${minor} ${patch}
			done
			#
			# finale apt sources list
			UniventionAptSourcesList ${MAJOR} ${MINOR} ${PATCH}
			#
			# finale update and dist upgrade
			apt-get -qq update 2>/dev/null && apt-get -qqy dist-upgrade && apt-get -qqy autoremove || /bin/true
			#
			# container mode slim ( same as Docker file )
			UniventionContainerModeSlimify
			#
			# container mode init ( same as Docker file )
			UniventionContainerModeDockerfileInit
			#
			# checking if the container needs to restart
			UniventionContainerModeRestartCheck
			#
		fi
	}
}
#
## create the latest container mode environment based on ucs-releases.json, fallback to github repository default tag or form specific version
debug "### STOPP SCRIPT($(pwd)/$0) ###"

## ucr removes
UniventionConfigRegistryUnSet ${ucrremoves[@]}

## ucr changes
UniventionConfigRegistrySet ${ucrchanges[@]}

## ucr commit
UniventionConfigCommit ${ucrcommit[@]}

## cleanup
unset \
	ucrchanges ucrremoves ucrcounter ucrcommit

debug "### CLEAN SCRIPT($(pwd)/$0) ###"
